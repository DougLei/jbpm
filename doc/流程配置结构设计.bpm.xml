<?xml version="1.0" encoding="UTF-8"?>
<bpm-configuration>
	<!-- 
		流程配置结构, 核心主要包括以下两种节点类型:
		1. 连线
		2. 任务, 包含两种类型:
			2.1. 手动任务, 需要用户手动处理, 来推动流程流转, 主要是用户任务
			2.2. 自动任务, 可以自行推动流程流转, 例如开始/结束事件, 网关任务, 子流程任务, SQL脚本任务, 定时任务, 邮件任务等
			
			
		其他说明:
		1. parallelGateway和inclusiveGateway在join时, 只能join一个父任务的分支任务, 如果配置尝试join多个父任务的分支任务, 会出现重复的网关数据
		2. endEvent具有join功能, 且逻辑同parallelGateway和inclusiveGatewa相同
	-->
	<!-- 
		工作流配置起点:
		* code: 唯一编码值, 必须配置, 没有默认值
		* version: 用户自定义版本, 必须配置, 没有默认值
		* name: 流程名称, 可不配置, 默认值为code:version
		* title: 实例标题(表达式), 可不配置, 默认值为name
		** 例如: #{user.name}的请假申请, 其中 #{}表示会从流程变量中获取对应的数据, 如果取不到, 引擎会把#{user.name}直接作为标题的一部分; #{}中的书写方法, 符合ognl的表达式规范, 具体需要由用户控制
		* pageID: 流程关联的页面唯一标识, 属于全局配置, 可不配置, 没有默认值; 体现在流转过程中, 在返回
	 -->
	<process code="vocation" version="v2020" name="" title="" pageID="">
		<!-- 
			开始事件, 一个流程中只能有一个开始
			* defaultOutputFlow: 默认流出的Flow Id, 可不配置; 当配置了多条线时, 如果线的条件都不满足, 引擎会根据配置的defaultOutputFlow进行流出, 如果没有配置, 引擎会抛出异常
		-->
		<startEvent id="startEvent" name="" defaultOutputFlow="">
			<conditionExpr>
				<![CDATA[ 判断表达式, 根据表达式决定是否可以启动流程; 可不配置, 默认结果为true ]]>
			</conditionExpr>
			
			<!-- 监听器, 按照配置的顺序依次执行, 可不配置, 默认为null -->
			<listeners>
				<listener value="完整的类路径" /><!-- 按照配置的顺序依次执行, 可配置多个 -->
			</listeners>
		</startEvent>
		
		<!-- 
			结束事件, 一个流程中可以有多个结束
		 -->
		<endEvent id="endEvent1" name="">
			<listeners></listeners><!-- 参考startEvent中的listeners配置 -->
		</endEvent>
		
		<!-- 
			用户任务:
			* id: 全局唯一标识, 是整个配置文件中的唯一标识
			* name: 任务名称, 可不配置, 默认为id
			* defaultOutputFlow: 参考startEvent的defaultOutputFlow配置
			* pageID: 任务关联的页面唯一标识, 优先级高于全局页面标识, 可不配置, 默认会继承process中的pageID
			* timeLimit: 办理时限(表达式), 设置当前用户任务需要在多长时间内办理, 可不配置, 不配置则没有时限约束
			** d: 天类型, 不区分大小写
			** h: 小时类型, 不区分大小写
			** m: 分钟类型, 不区分大小写
			*** n/w/s: 类型后缀, n表示自然日, w表示工作日, s表示智能工作日(跳过假日), 只能三选一, 可不配置, 默认值为n, 不区分大小写; 如果根据sw无法计算, 会自动降级为w, 同理, 如果w也无法计算, 则又会自动降级为n
			** 以上类型可按照需求组合使用, 例如: 1d1hn/1h1dn, 均表示1天1小时(自然日)
			** 以上类型的配置值必须是正整数, 否则会被当做不合法值; 如果配置的值出现不合法, 引擎会抛出异常
		 -->
		<userTask id="userTask1" name="任务名称" defaultOutputFlow="" pageID="" timeLimit="目前实现自然日即可, 更复杂的暂不考虑">
			<!-- 
				当前任务候选人相关配置; 可不配置, 使用各自的默认配置, 具体的默认配置结构看各自的说明:
				* <candidate> 
				* 	assignPolicy的默认配置结构
				* 	handlePolicy的默认配置结构
				* </candidate>
			 -->
			<candidate>
				<!-- 
					候选人指派策略:
					* isDynamic: 是否动态指派, 不区分大小写, 可不配置, 默认值为true; 如果配置值不合法, 则引擎会使用默认值
					** true: 从上一个任务进入当前任务时, 需要由上一个任务的办理人指派当前任务可由哪些人办理, 指派的范围是所有<expression>中配置的人的并集
					** false: 进入当前任务时, 引擎会自动选择所有<expression>中配置的人的并集, 做为当前任务的办理人; 如果上一环节有指派办理人, 则会被忽略
					
					* assignNum: 最多可指派的人数(表达式), 针对isDynamic=true生效; 可不配置, 默认值为1
					** 纯数字: 表示可指派的人数数量, 数字必须为正整数
					** 数字+%: 表示可指派的人数百分比, 计算后最少1人; 最后还可以追加配置: +/-, 表示%处理后的小数是向上取整(+)还是向下取整(-); 例如: 10%+; 可不追加配置, 在不追加配置的情况下, 如果小数小于0.5, 向下取整, 如果小数大于等于0.5, 向上取整
					** 如果遇到不合法的配置, 引擎会抛出异常
					
					* 可不配置, 默认配置结构为: <assignPolicy></assignPolicy>
				 -->
				<assignPolicy isDynamic="true/false" assignNum="1">
					<!-- 
						可指派的用户表达式, 可配置多个
						* name: 表达式名称, 区分大小写, 必填
						* value: 表达式需要的值, 根据具体表达式决定, 是否必填
						* extendValue: 扩展值, 该属性值可提供给扩展使用(二开)
						
						* 系统内置的表达式包括: (name <==> value; 没写value的表示不需要填写, 即使填写了也不生效)
						** 
					 -->
					<expression name="" value="" extendValue="" />
				</assignPolicy>
				
				<!-- 
					候选人办理策略(在当前环节办理人的办理策略):
					* suggest: 表示是否需要强制输入意见; 不区分大小写, 默认值为false; 如果配置值不合法, 则引擎会使用默认值
					* attitude: 表示是否需要强制表态; 同上 
					
					* 可不配置, 默认配置结构为: <handlePolicy></handlePolicy>
				-->
				<handlePolicy suggest="false" attitude="false">
					<!-- 
						多人办理时的策略; 如果不配置则为单人办理模式; 
						* handleNum: 可办理的人数(表达式), 参考assignPolicy中的assignNum; 默认值为100%
						* serialHandle: 是否串行办理, 不区分大小写, 可不配置, 默认值为false; 如果配置值不合法, 则引擎会使用默认值
						* serialHandleSequence: 串行办理时的办理顺序策略名称, 针对串行办理(serialHandle=true)时生效, 区分大小写; 可不配置, 默认按照认领时间办理; 如果配置值不合法, 引擎会抛出异常
						* canFinish: (判断)任务是否可以结束的策略名称, 区分大小写; 可不配置, 默认实际办理人数满足设置的办理人数即可结束办理, 由最后一个办理人决定流程的流转; 如果配置值不合法, 引擎会抛出异常
					 -->
					<multiple handleNum="100%" serialHandle="true/false" serialHandleSequence="" canFinish="" />
				</handlePolicy>
			</candidate>
			
			<!-- 
				在当前任务时, 可以执行的操作, 可配置多个, 也可不配置(默认为null)
				* type: 操作的类型名, 必须配置, 区分大小写
				* name: 操作描述, 可不配置, 默认值为type的值
				* order: 操作排序, 可不配置, 默认值为0
			 -->
			 <!-- 这几个操作是当前办理时, 可进行的操作 -->
			<option type="sendCopy" name="抄送" order="">
				<candidate></candidate><!-- 必须配置 -->
			</option>
			<option type="delegate" name="委托" order="">
				<candidate></candidate><!-- 可不配置, 默认是当前环节指派的候选人 -->
			</option>
			<option type="assist" name="协办" order="">
				<candidate></candidate><!-- 必须配置 -->
			</option>
			<!-- 
				流程跳转, 通过设置name可以实现退回起始节点, 退回上一任务等功能
				* target: 要跳转的目标任务id
			 -->
			<option type="skip" name="流程跳转" order="" target="">
				<candidate></candidate><!-- 必须配置 -->
			</option>
			<option type="tracking" name="流程跟踪" order="" />
			
			<!-- 这两个操作是办理提交后, 可进行的操作 -->
			<!-- 
				催办
				* moment: 催办时机的策略名称, 例如在逾期后催办, 在提交的一天后催办等; 可不配置, 默认是在逾期后可进行催办
			 -->
			<option type="urging" name="催办" order="" moment="" />
			<!-- 
				撤回, 当用户提交后, 如果发现提交的有问题, 还可以自主选择撤回, 重新编辑后重新提交
				* moment: 撤回时机的策略名称, 例如未有人认领时可撤回, 在提交的一小时内可撤回等; 可不配置, 默认是在未有人认领时可撤回
				* times: 可以撤回的次数, 默认值为0, 配置的值在小于1时, 表示不限制次数; 如果任务被人认领, 则不能撤回
			 -->
			<option type="withdraw" name="撤回" order="" moment="" times="0" />
			
			<listeners></listeners><!-- 参考startEvent中的listeners配置 -->
			<!-- 流程挂起, 终止, 激活, 重置等功能, 均放到流程实例管理界面, 由流程管理员操作 -->
		</userTask>
		
		<!-- 
			排他网关, 拥有多条流出的flow, 会按照flow的order依次判断, 选择第一个判断结果为true的流出 
			* id: 参考startEvent中的id配置
			* name: 参考startEvent中的name配置
			* defaultOutputFlow: 参考startEvent的defaultOutputFlow配置
		-->
		<exclusiveGateway id="exclusiveGateway1" name="" defaultOutputFlow="">
			<!-- 
				变量继承配置, 从上一个任务流转过来时, 引擎会带着上一个任务的所有流程变量, 需要配置网关中可使用哪些范围的流程变量; 可不配置, 默认使用所有范围的流程变量; 如果配置了, 则使用指定范围的流程变量
				* global: 全局范围, 基于整个流程实例; 值为true, 表示继承, 反之不继承; 可不配置, 默认值为true; 不区分大小写
				* local: 本地范围, 同上
				* transient: 瞬时范围
			 -->
			<variableExtend global="true" local="true" transient="true"/>
			<listeners></listeners><!-- 参考startEvent中的listeners配置 -->
		</exclusiveGateway>
		
		<!-- 
			并行网关, 拥有多条流出的flow, 会同时从每个flow中流出形成分支, 引擎不会关注每个flow中配置的条件, 即时配置了也会忽略
			* 配置参考exclusiveGateway的配置
		 -->
		<parallelGateway id="parallelGateway1" name="" defaultOutputFlow="">
			<variableExtend global="true" local="true" transient="true"/>
			<listeners></listeners>
		</parallelGateway>
		
		<!-- 
			包容网关, 拥有多条流出的flow, 会判断每条flow的条件, 从条件值为true的flow流出, 可能会形成分支
			* 配置参考exclusiveGateway的配置
		 -->
		<inclusiveGateway id="inclusiveGateway1" name="" defaultOutputFlow="">
			<variableExtend global="true" local="true" transient="true"/>
			<listeners></listeners>
		</inclusiveGateway>
		
		<!-- 
			顺序流, 可配置条件; 如果一个任务有多条流出flow, 则使用排他模式
			* id: 全局唯一标识, 是整个配置文件中的唯一标识
			* name: 流名称, 可不配置, 默认为id
			* order: 流排序, 可不配置, 默认值为0
			* source: 上一个任务的id
			* target: 下一个任务的id
		 -->
		<flow id="flow1" name="" order="0, 排序值, 默认为0" source="startEvent1" target="userTask1">
			<conditionExpr>
				<![CDATA[ 判断表达式, 根据表达式决定是否可以从该flow流出; 可不配置, 默认结果为true ]]>
			</conditionExpr>
			<listeners></listeners><!-- 参考startEvent中的listeners配置 -->
		</flow>
		
		
		
		<!-- 暂不实现 -->
		<!-- 子流程任务 -->
		<processTask id="processTask1" name="">
			<process></process>
		</processTask>
		<!-- SQL脚本任务 -->
		<sqlTask id="sqlTask1" name=""></sqlTask>
		<!-- 定时任务 -->
		<timerTask id="timerTask1" name="" cronExpr=""></timerTask>
		<!-- 邮件任务 -->
		<emailTask id="emailTask1" name=""></emailTask>
	</process>
	
	<!-- 配置流程图的结构, 主要就是记录画布的长宽，以及各个节点的坐标，长宽等 -->
	<process-img>
	</process-img>
</bpm-configuration>